The life cycle of a data item
-----------------------------
In the beginning, newdat() is called by the client routines to
create a new data item.  Newdat obtains memory for the item by
calling alloc().  It may create no more than the item descriptor,
but in most cases it makes a second call to alloc() to create
the data area for DA and CH types.  Alloc creates a linked list
of structure memblock in addition to allocating the actual
memory; so it makes two calls to malloc().  

Eventually the client program initiates disposal of the item
through pop() which is the complement of newdat().  Pop() calls
aplfree() which is the complement of alloc.  Aplfree calls 
free() which is the complement of malloc.

By the way, in addition to pop(), in some places pushing and
popping of stack items is done by direct increment/decrement of
"sp".  

Another thing to watch out for is that the clients call pop()
after they have used the item pointed to at the top of the 
stack.  


Care and Feeding of the Stack
-----------------------------
The stack is a static array of fixed length declared in apl.h .
The stack contains pointers to data entities of type "item".
The stack pointer "sp" points to these (hence double pointer
**sp).  "sp" points to the next unallocated value - in effect,
the top of the stack is the item below it at sp[-1] .  As each
line of pseudo code is executed the stack may grow or shrink.  At
the end of execution it must be back to zero, otherwise an error
has occurred.  You can watch this by turning on the stack trace
with Ibeams 1 and 2.

User Defined Names
------------------
Names of variables and user defined functions are held in static
memory in symbolTable which is an array of structure symbolTable.  (Note that
symbolTable is both the name of a structure and an array of that 
structure!).  symbolTable[] is of finite lenght, set in apl.h at 200 
elements.  

Management of symbolTable crops up as an issue in several places.  As
symbolTable[] is static and finite, when names are erased their memory
is not released.  Instead, their name is converted into "#".  Next
time that a variable name is required, parser/getnam.c looks for
and "#", if one if found, it is used, if not, the next null element 
of symbolTable[] is used.  Deleting variables is a two part process.
First the name pointer is converted into a pointer to "#", next
the actual data is erased.  

The whole system is rather messy and should be converted into
a linked list managed by alloc() and aplfree().

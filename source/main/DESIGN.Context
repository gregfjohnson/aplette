The Context structure.
---------------------
The Context structure holds all the information about
a line of APL code: the input line, the p-code, its mode,
a pointer to the current token and much more...

A new Context is created at the following points:
- apl.h , only this first context is not allocated
  dynamically, the global "prime_context" points to it.
- main/mainloop.c When control returns to mainloop
  after an error (other than from immediate mode) then
  a new Context is created and linked to the previous.
- mixed_monadic/ex_execute.c (Mode==execute)
- quad_var/ex_quad.c (Mode==quadinp)
- userfunc/ex_fun.c (Mode==deffun)

As each new Context is created, it is linked to the
previous, this allows the linked list to be used for:
- error traceback (Including ")SI" stuff).
- Restoration of the global variable environment
  (or any other, pending environment).
When a new Context is created, it is locally called
"thisContext".

The global variable gsip "Global State Indicator Pointer"
points to the currently running(or compiling) Context.
"gsip" is not always the same as "thisContext" - "gsip"
is used as a global so that it is preserved at the end
of error processing.

After a function is suspended, the state indicator points
to a linked list of structure Context.  This is cleared by
the user with the commands )SIC or ->0 .
Refer to userfunc/ex_ibr[0].c for this process.

-----------
The context structure was previously called the state indicator
and pointed to by the global state indicator pointer "gsip".
The old documentation had this to say about gsip:

(gsip == 0) implies
an empty list, (gsip->sip == 0) implies the end of the list,
and (gsip->np == 0) implies a state indicator seperator.
(A new function was evoked with an old one pending.)

Note that "gsip->funlc" is the same as the old global
variable "funlc", and 

(gsip && gsip->sip ? gsip->sip->funlc : 0)
